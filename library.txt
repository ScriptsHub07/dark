local UILibrary = {}

-- Configurações do tema Fluent
UILibrary.Theme = {
    PrimaryColor = Color3.fromRGB(32, 32, 32),
    SecondaryColor = Color3.fromRGB(40, 40, 40),
    AccentColor = Color3.fromRGB(0, 120, 215),
    TextColor = Color3.fromRGB(255, 255, 255),
    SubTextColor = Color3.fromRGB(200, 200, 200),
    DisabledColor = Color3.fromRGB(90, 90, 90),
    HoverColor = Color3.fromRGB(50, 50, 50),
    BorderColor = Color3.fromRGB(70, 70, 70)
}

-- Serviços
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Função para criar instâncias básicas
function UILibrary:CreateInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

-- Função para criar efeito de acrílico (transparência com desfoque)
function UILibrary:CreateAcrylicEffect(parent)
    local Frame = self:CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = self.Theme.PrimaryColor,
        BackgroundTransparency = 0.1,
        BorderSizePixel = 0,
        Parent = parent
    })
    
    local Corner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = Frame
    })
    
    return Frame
end

-- Criação da janela principal no estilo Fluent
function UILibrary:CreateWindow(name, size, position)
    local ScreenGui = self:CreateInstance("ScreenGui", {
        Name = "FluentUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    local MainFrame = self:CreateInstance("Frame", {
        Name = "MainFrame",
        Size = size or UDim2.new(0, 350, 0, 450),
        Position = position or UDim2.new(0.5, -175, 0.5, -225),
        BackgroundColor3 = self.Theme.PrimaryColor,
        ClipsDescendants = true,
        Active = true,
        Draggable = true,
        Parent = ScreenGui
    })
    
    local MainCorner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = MainFrame
    })
    
    local MainStroke = self:CreateInstance("UIStroke", {
        Color = self.Theme.BorderColor,
        Thickness = 1,
        Parent = MainFrame
    })
    
    -- Efeito de sombra
    local Shadow = self:CreateInstance("ImageLabel", {
        Name = "Shadow",
        Size = UDim2.new(1, 10, 1, 10),
        Position = UDim2.new(0, -5, 0, -5),
        BackgroundTransparency = 1,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.8,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10, 10, 118, 118),
        ZIndex = 0,
        Parent = MainFrame
    })
    
    -- TopBar no estilo Fluent
    local TopBar = self:CreateInstance("Frame", {
        Name = "TopBar",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = self.Theme.SecondaryColor,
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = MainFrame
    })
    
    local TopBarCorner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = TopBar
    })
    
    local TitleLabel = self:CreateInstance("TextLabel", {
        Name = "TitleLabel",
        Size = UDim2.new(0.7, 0, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        BackgroundTransparency = 1,
        Text = name or "Fluent UI",
        TextColor3 = self.Theme.TextColor,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.Gotham,
        TextSize = 16,
        ZIndex = 2,
        Parent = TopBar
    })
    
    local ButtonContainer = self:CreateInstance("Frame", {
        Name = "ButtonContainer",
        Size = UDim2.new(0, 70, 1, 0),
        Position = UDim2.new(1, -70, 0, 0),
        BackgroundTransparency = 1,
        ZIndex = 2,
        Parent = TopBar
    })
    
    local MinimizeButton = self:CreateInstance("TextButton", {
        Name = "MinimizeButton",
        Size = UDim2.new(0, 35, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = "-",
        TextColor3 = self.Theme.TextColor,
        Font = Enum.Font.GothamBold,
        TextSize = 18,
        ZIndex = 2,
        Parent = ButtonContainer
    })
    
    local CloseButton = self:CreateInstance("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 35, 1, 0),
        Position = UDim2.new(0, 35, 0, 0),
        BackgroundTransparency = 1,
        Text = "×",
        TextColor3 = self.Theme.TextColor,
        Font = Enum.Font.Gotham,
        TextSize = 20,
        ZIndex = 2,
        Parent = ButtonContainer
    })
    
    -- Container para os elementos
    local Container = self:CreateInstance("ScrollingFrame", {
        Name = "Container",
        Size = UDim2.new(1, -20, 1, -50),
        Position = UDim2.new(0, 10, 0, 45),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 5,
        ScrollBarImageColor3 = self.Theme.SecondaryColor,
        ScrollBarImageTransparency = 0.5,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Parent = MainFrame
    })
    
    local UIListLayout = self:CreateInstance("UIListLayout", {
        Name = "UIListLayout",
        Padding = UDim.new(0, 10),
        Parent = Container
    })
    
    local UIPadding = self:CreateInstance("UIPadding", {
        Name = "UIPadding",
        PaddingTop = UDim.new(0, 5),
        PaddingBottom = UDim.new(0, 5),
        Parent = Container
    })
    
    -- Funções da janela
    local minimized = false
    local originalSize = MainFrame.Size
    
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            TweenService:Create(
                MainFrame,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Size = UDim2.new(MainFrame.Size.X.Scale, MainFrame.Size.X.Offset, 0, 40)}
            ):Play()
            Container.Visible = false
            MinimizeButton.Text = "+"
        else
            TweenService:Create(
                MainFrame,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Size = originalSize}
            ):Play()
            Container.Visible = true
            MinimizeButton.Text = "-"
        end
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        TweenService:Create(
            MainFrame,
            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Size = UDim2.new(0, 0, 0, 0)}
        ):Play()
        wait(0.3)
        ScreenGui:Destroy()
    end)
    
    -- Efeitos de hover nos botões
    local function setupButtonHover(button)
        button.MouseEnter:Connect(function()
            TweenService:Create(
                button,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundColor3 = self.Theme.HoverColor}
            ):Play()
        end)
        
        button.MouseLeave:Connect(function()
            TweenService:Create(
                button,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundTransparency = 1}
            ):Play()
        end)
    end
    
    setupButtonHover(MinimizeButton)
    setupButtonHover(CloseButton)
    
    -- Atualizar o tamanho do canvas automaticamente
    UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Container.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 10)
    end)
    
    local window = {
        ScreenGui = ScreenGui,
        MainFrame = MainFrame,
        Container = Container,
        TopBar = TopBar
    }
    
    function window:SetPosition(newPosition)
        MainFrame.Position = newPosition
    end
    
    function window:SetSize(newSize)
        MainFrame.Size = newSize
        originalSize = newSize
    end
    
    return window
end

-- Componente Button no estilo Fluent
function UILibrary:CreateButton(parent, text, callback)
    local Button = self:CreateInstance("TextButton", {
        Name = "Button",
        Size = UDim2.new(1, 0, 0, 36),
        BackgroundColor3 = self.Theme.SecondaryColor,
        BorderSizePixel = 0,
        Text = text or "Button",
        TextColor3 = self.Theme.TextColor,
        Font = Enum.Font.Gotham,
        TextSize = 14,
        AutoButtonColor = false,
        Parent = parent.Container or parent
    })
    
    local Corner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = Button
    })
    
    Button.MouseButton1Click:Connect(function()
        if callback then
            callback()
        end
    end)
    
    Button.MouseEnter:Connect(function()
        TweenService:Create(
            Button,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = self.Theme.HoverColor}
        ):Play()
    end)
    
    Button.MouseLeave:Connect(function()
        TweenService:Create(
            Button,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = self.Theme.SecondaryColor}
        ):Play()
    end)
    
    Button.MouseButton1Down:Connect(function()
        TweenService:Create(
            Button,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = self.Theme.AccentColor}
        ):Play()
    end)
    
    Button.MouseButton1Up:Connect(function()
        TweenService:Create(
            Button,
            TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = self.Theme.HoverColor}
        ):Play()
    end)
    
    return Button
end

-- Componente Toggle no estilo Fluent
function UILibrary:CreateToggle(parent, text, default, callback)
    local ToggleFrame = self:CreateInstance("Frame", {
        Name = "ToggleFrame",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1,
        Parent = parent.Container or parent
    })
    
    local ToggleLabel = self:CreateInstance("TextLabel", {
        Name = "ToggleLabel",
        Size = UDim2.new(0.7, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = text or "Toggle",
        TextColor3 = self.Theme.TextColor,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.Gotham,
        TextSize = 14,
        Parent = ToggleFrame
    })
    
    local ToggleButton = self:CreateInstance("TextButton", {
        Name = "ToggleButton",
        Size = UDim2.new(0, 44, 0, 24),
        Position = UDim2.new(1, -44, 0.5, -12),
        BackgroundColor3 = default and self.Theme.AccentColor or self.Theme.SecondaryColor,
        AutoButtonColor = false,
        BorderSizePixel = 0,
        Parent = ToggleFrame
    })
    
    local Corner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = ToggleButton
    })
    
    local ToggleCircle = self:CreateInstance("Frame", {
        Name = "ToggleCircle",
        Size = UDim2.new(0, 20, 0, 20),
        Position = default and UDim2.new(0, 22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Parent = ToggleButton
    })
    
    local CircleCorner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = ToggleCircle
    })
    
    local toggled = default or false
    
    ToggleButton.MouseButton1Click:Connect(function()
        toggled = not toggled
        
        if toggled then
            TweenService:Create(
                ToggleButton,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundColor3 = self.Theme.AccentColor}
            ):Play()
            
            TweenService:Create(
                ToggleCircle,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Position = UDim2.new(0, 22, 0.5, -10)}
            ):Play()
        else
            TweenService:Create(
                ToggleButton,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundColor3 = self.Theme.SecondaryColor}
            ):Play()
            
            TweenService:Create(
                ToggleCircle,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Position = UDim2.new(0, 2, 0.5, -10)}
            ):Play()
        end
        
        if callback then
            callback(toggled)
        end
    end)
    
    local toggle = {
        Frame = ToggleFrame,
        Value = toggled
    }
    
    function toggle:SetValue(value)
        toggled = value
        
        if toggled then
            ToggleButton.BackgroundColor3 = self.Theme.AccentColor
            ToggleCircle.Position = UDim2.new(0, 22, 0.5, -10)
        else
            ToggleButton.BackgroundColor3 = self.Theme.SecondaryColor
            ToggleCircle.Position = UDim2.new(0, 2, 0.5, -10)
        end
        
        if callback then
            callback(toggled)
        end
    end
    
    function toggle:GetValue()
        return toggled
    end
    
    return toggle
end

-- Componente TextBox no estilo Fluent
function UILibrary:CreateTextBox(parent, placeholder, callback)
    local TextBoxFrame = self:CreateInstance("Frame", {
        Name = "TextBoxFrame",
        Size = UDim2.new(1, 0, 0, 36),
        BackgroundColor3 = self.Theme.SecondaryColor,
        BorderSizePixel = 0,
        Parent = parent.Container or parent
    })
    
    local Corner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = TextBoxFrame
    })
    
    local TextBox = self:CreateInstance("TextBox", {
        Name = "TextBox",
        Size = UDim2.new(1, -16, 1, 0),
        Position = UDim2.new(0, 8, 0, 0),
        BackgroundTransparency = 1,
        Text = "",
        PlaceholderText = placeholder or "Enter text...",
        TextColor3 = self.Theme.TextColor,
        PlaceholderColor3 = self.Theme.SubTextColor,
        Font = Enum.Font.Gotham,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TextBoxFrame
    })
    
    TextBox.FocusLost:Connect(function(enterPressed)
        if callback then
            callback(TextBox.Text, enterPressed)
        end
    end)
    
    TextBox.Focused:Connect(function()
        TweenService:Create(
            TextBoxFrame,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = self.Theme.HoverColor}
        ):Play()
    end)
    
    TextBox.FocusLost:Connect(function()
        TweenService:Create(
            TextBoxFrame,
            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = self.Theme.SecondaryColor}
        ):Play()
    end)
    
    return TextBox
end

-- Componente TextLabel no estilo Fluent
function UILibrary:CreateTextLabel(parent, text, isSubText)
    local TextLabel = self:CreateInstance("TextLabel", {
        Name = "TextLabel",
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = text or "Text Label",
        TextColor3 = isSubText and self.Theme.SubTextColor or self.Theme.TextColor,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.Gotham,
        TextSize = isSubText and 12 or 14,
        Parent = parent.Container or parent
    })
    
    return TextLabel
end

-- Componente ScrollBar (Slider) no estilo Fluent
function UILibrary:CreateSlider(parent, text, min, max, defaultValue, callback)
    local SliderFrame = self:CreateInstance("Frame", {
        Name = "SliderFrame",
        Size = UDim2.new(1, 0, 0, 60),
        BackgroundTransparency = 1,
        Parent = parent.Container or parent
    })
    
    local TitleLabel = self:CreateInstance("TextLabel", {
        Name = "TitleLabel",
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = text or "Slider",
        TextColor3 = self.Theme.TextColor,
        TextXAlignment = Enum.TextXAlignment.Left,
        Font = Enum.Font.Gotham,
        TextSize = 14,
        Parent = SliderFrame
    })
    
    local ValueLabel = self:CreateInstance("TextLabel", {
        Name = "ValueLabel",
        Size = UDim2.new(0, 50, 0, 20),
        Position = UDim2.new(1, -50, 0, 0),
        BackgroundTransparency = 1,
        Text = tostring(defaultValue or 0),
        TextColor3 = self.Theme.SubTextColor,
        TextXAlignment = Enum.TextXAlignment.Right,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        Parent = SliderFrame
    })
    
    local Track = self:CreateInstance("Frame", {
        Name = "Track",
        Size = UDim2.new(1, 0, 0, 4),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = self.Theme.SecondaryColor,
        BorderSizePixel = 0,
        Parent = SliderFrame
    })
    
    local TrackCorner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 2),
        Parent = Track
    })
    
    local Fill = self:CreateInstance("Frame", {
        Name = "Fill",
        Size = UDim2.new((defaultValue or 0) / (max or 100), 0, 1, 0),
        BackgroundColor3 = self.Theme.AccentColor,
        BorderSizePixel = 0,
        Parent = Track
    })
    
    local FillCorner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 2),
        Parent = Fill
    })
    
    local Thumb = self:CreateInstance("TextButton", {
        Name = "Thumb",
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new((defaultValue or 0) / (max or 100), -10, 0.5, -10),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        AutoButtonColor = false,
        BorderSizePixel = 0,
        Text = "",
        Parent = Track
    })
    
    local ThumbCorner = self:CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = Thumb
    })
    
    local dragging = false
    local currentValue = defaultValue or 0
    
    local function updateValue(input)
        local relativeX = (input.Position.X - Track.AbsolutePosition.X) / Track.AbsoluteSize.X
        local value = math.floor(((relativeX * (max - min)) + min) + 0.5)
        value = math.clamp(value, min, max)
        
        if value ~= currentValue then
            currentValue = value
            ValueLabel.Text = tostring(value)
            
            TweenService:Create(
                Fill,
                TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Size = UDim2.new(relativeX, 0, 1, 0)}
            ):Play()
            
            TweenService:Create(
                Thumb,
                TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Position = UDim2.new(relativeX, -10, 0.5, -10)}
            ):Play()
            
            if callback then
                callback(value)
            end
        end
    end
    
    Thumb.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    Thumb.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateValue(input)
        end
    end)
    
    Track.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            updateValue(input)
        end
    end)
    
    local slider = {
        Frame = SliderFrame,
        Value = currentValue
    }
    
    function slider:SetValue(value)
        currentValue = math.clamp(value, min, max)
        local relativeX = (currentValue - min) / (max - min)
        
        ValueLabel.Text = tostring(currentValue)
        Fill.Size = UDim2.new(relativeX, 0, 1, 0)
        Thumb.Position = UDim2.new(relativeX, -10, 0.5, -10)
        
        if callback then
            callback(currentValue)
        end
    end
    
    function slider:GetValue()
        return currentValue
    end
    
    return slider
end

return UILibrary
